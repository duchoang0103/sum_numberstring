#Ở đây chúng ta không sử dụng stack(còn gọi là lifoQueue) trong thư viện queue mà sẽ chuyển string thành list, để hiểu rõ hơn thì ta coi list này như một stack có đáy là phần tử đầu tiên có chỉ số là 0 và đỉnh là phần tử có chỉ số cuối cùng
def stringtostack(string):#Hàm chuyển chuỗi số vào trong stack
    check=False #Biến để check xem còn sự tồn tại của những số 0 liền nhau nằm trước trong string number ví dụ: dạng 000000xxx
    stack = []
    for x in string:
        if check==False: #Dùng kiểm tra và bỏ bớt kí tự 00.. nằm trước trong string trước khi chuyển vào stack vd: 00000081 sẽ bỏ bớt 000000 ở trước và chỉ chuyển 81 vào stack
            if x=='0':
                continue
            else:
                check=True #Không còn sự tồn tại 000 ở đầu và bắt đầu push vào stack
        stack.append(int(x))
    return stack 

def sum(a,b): #Hàm tính tổng hai chuỗi số dạng string 
    if a=="0" and b=="0":#Kiểm tra hai chuỗi đều có giá trị 0 thì trả về kq 0
        return "0"
    if a==b=="":#Kiểm tra hai chuỗi đều rỗng thì xuất ra exception
        raise Exception("Hai chuoi dau vao rong !")
    if a=="":#Kiểm tra chỉ chuỗi thứ nhất rỗng thì xuất ra exception
        raise Exception("Chuoi dau vao thu nhat rong !")
    if b=="":#Kiểm tra chỉ chuỗi thứ hai rỗng thì xuất ra exception
        raise Exception("Chuoi dau vao thu hai rong !")
    if a.isdecimal()==b.isdecimal()==False:#Kiểm tra nếu hai chuỗi đều có kí tự không hợp lệ !=(0,1,2,3,4,5,6,7,8,9) thì xuất ra exception
        raise Exception("Hai chuoi dau vao co ki tu khong hop le !")
    if a.isdecimal()==False:#Kiểm tra nếu chỉ chuỗi thứ nhất có kí tự không hợp lệ !=(0,1,2,3,4,5,6,7,8,9) thì xuất ra exception
        raise Exception("Chuoi dau vao thu nhat co ki tu khong hop le !")
    if b.isdecimal()==False:#Kiểm tra nếu chỉ chuỗi thứ hai có kí tự không hợp lệ !=(0,1,2,3,4,5,6,7,8,9) thì xuất ra exception
        raise Exception("Chuoi dau vao thu hai co ki tu khong hop le !")
    x=stringtostack(a)
    y=stringtostack(b)
    result="" # khởi tạo chuỗi kết quả ban đầu là rỗng
    flag=0#Lúc cộng sẽ sinh ra biến nhớ (đặt là flag)
    while (x!=[] or y!=[]): #Khi stack x hoặc stack y đều còn chưa rỗng
        if x!=[] and y!=[]: #Stack x và stack y đều khác rỗng
            t=x[-1]+y[-1]+flag #t là tổng hai số khi cộng lần lượt từ đỉnh stack xuống
            if t>=10: #nếu tổng 2 số lớn hơn hoặc bằng 10 thì gắn biến nhớ =1 ngược lại =0
                flag=1
                t%=10 #lấy kết quả của hàng đơn vì gắn cho t sau khi lấy biến nhớ = 1
            else:
                flag=0
            x.pop() #Lần lượt lấy hai phần tử vừa cộng xong ra khỏi 2 stack x,y tương ứng
            y.pop()
        elif x!=[] and y==[]: #Stack x khác rỗng stack y rỗng
            t=x[-1]+flag
            if t>=10:
                flag=1
                t%=10
            else:
                flag=0
            x.pop()
        elif x==[] and y!=[]: #Stack y khác rỗng stack x rỗng
            t=y[-1]+flag
            if t>=10:
                flag=1
                t%=10
            else:
                flag=0
            y.pop()
        result=str(t)+result #Sau khi cộng xong lần lượt lưu kết quả t vào chuỗi kết quả theo đúng chiều của phép cộng
    if flag==1: # xử lý cho trường hợp x==[] or y==[] ở trong vòng while khi mà biến nhớ vẫn còn những chưa được tính vào chuỗi kết quả VD như 900+100 (lúc 9+1 flag=1 => thoát khỏi vòng lặp result lúc này ="000" sẽ được xử lý để trả ra kq 1000)
        result=str(flag)+result
    return result

#Ở đây không xử lý nhập chuỗi từ bàn phím vì sẽ bị giới hạn ở 4095 kí tự nhập

a="3971704860000313045589363152704608723738309370926891741910562821978952235550551054859891531868429354783370985980411964673636299201518222423385441925253395813604216346276011607573841083360466918455669336182642753252050606681300858798769135060759114202595235321069895176606971682263253358489114111338089437736917536753735156571835298849977917132091944117724566381654531804564386650518745159576825072189322867288912001250720856004548605491306737665779561691159886666110499411421688110198028603370354518800684414908678343621811798526728914486474728630021735572309557879107840729789608923029048579968920843703307630202981033673907856144102214840348550228751184571537237512356338342327001779179077474598397549050944670196006573498666401055940761885420201581608353083116570421585178204717282302455441067267624676829378037179543299585550913938795764618476119697629470690253925939375392116843616410664984868965390915678861545761320339566264376316459422556705160276522782819984681163005444297610211634583444411639298371989449278607244730783289055395602011517256051489571753961947918938734768723430764569151803476550837748864499666605950552490934436252299457073236356357148458703862814258008735185625444861435854498608268313921579916051422649009923768619662135806266764707329433186541615947040352983993154366855891680010370296010212942962475301074028757156499240183443772562267404342651299811622112390784490943759695018156757871599762233441902816652234432509676063132849681787299809394906954649275338269836376755580527291979067072984381276902240801869111564121199822590768289972496763019815368124858559029214048031951466111380755829586477182009403778999895900179438519481652461336409656345998533809890576914627728347382900525379056846871675619720464942500249432861926035260945661050529165029641029804449957073093695227176798458842972936877928884881882549733868610936496479206895233395449023664595866120404132625071773217705497766205328886273424532479533923260710303754819181319680307550025565152689521263519411844455995137684157704970744752015582209502817261150380450771033394046586484512235667324412387651238842911344090375526360588704606411398946849499768964625618168212356848613076307915745133384714786731030697030816668315885653419866681649305504422218104874454909296515868564641810373358558210115075204872536291624340958011508045041679457608554035127036983116964083831448926937065268255927939099763832808483752671019457615741653560882273688050470579592446048731329771179226500463014058747229009407109056984282151863582702761835293753398571819558867061598831709499674486429251608295674053195077731768815061726496347877992514607892162087941456827634439960533380725218071578613393270785728109707171799665316280104531699102712127919256180780553217476438417310222082532301451302326087495125236699820190370522137681246548732459364916038573153537643678189103888979209080522017303464983549613508607891673731095363454258706650648995269818436569768150076827447718580153182867948102679637676731824582624576587795475456186197144223914216569815225703081581891108999831467223655894704123279338715555121135286711873910253072932821863720817696772365570767817269105620095675012546063836126786785834275722202431853464372114259799792561529736124221180657155566856239846676371181745511077012818802016360099833339411132732527779680820767156956952646337125825582741034438342068028094943149433082958910644070093978371185097478304920127277889359779320383125317210095574845371243313365846871653947082909584632458598493906278524485851017869999377126860926792285490496293042359183891442929688932776050156604685317813419543379069575825762514089463768620176926880137010684040642983206641184105456922289326653453787244865043800311641575013287726487385913114866932126732789476908660162027545526637202135486731421632526962116158411957090822258911749148761550377946381486591951285682864407234389081423523655008040782362921375691737931024958495922027758537985423766019832277586555110765876484702056803724821819503346002133004335553532645984267393535897639678102764656200462121104616096138804616768165499965355077351386079775218018990524176539425650750676651811041296950482797430897934951650054878567522298892530680888927065153118670294075625899147889513519143510274496896220588499774442699823145805912056694812129269608589342869527821388905117767045159921976456853832185822647288206184426920084831556528460792374110188873203528584672226971741405732719706830801855997828381926334141058749417372506776370599996360089705089069131524871861247762083468967219208876063799593445699048521297721518117959539908536943384153730080048845514728"
#print(len(a))
#chuỗi a có 4591 kí tự
b="8972704860000313045589363152704608723738309370926891741910562821978952235550551054859891531868429354783370985980411964673636299201518222423385441925253395813604216346276011607573841083360466918455669336182642753252050606681300858798769135060759114202595235321069895176606971682263253358489114111338089437736917536753735156571835298849977917132091944117724566381654531804564386650518745159576825072189322867288912001250720856004548605491306737665779561691159886666110499411421688110198028603370354518800684414908678343621811798526728914486474728630021735572309557879107840729789608923029048579968920843703307630202981033673907856144102214840348550228751184571537237512356338342327001779179077474598397549050944670196006573498666401055940761885420201581608353083116570421585178204717282302455441067267624676829378037179543299585550913938795764618476119697629470690253925939375392116843616410664984868965390915678861545761320339566264376316459422556705160276522782819984681163005444297610211634583444411639298371989449278607244730783289055395602011517256051489571753961947918938734768723430764569151803476550837748864499666605950552490934436252299457073236356357148458703862814258008735185625444861435854498608268313921579916051422649009923768619662135806266764707329433186541615947040352983993154366855891680010370296010212942962475301074028757156499240183443772562267404342651299811622112390784490943759695018156757871599762233441902816652234432509676063132849681787299809394906954649275338269836376755580527291979067072984381276902240801869111564121199822590768289972496763019815368124858559029214048031951466111380755829586477182009403778999895900179438519481652461336409656345998533809890576914627728347382900525379056846871675619720464942500249432861926035260945661050529165029641029804449957073093695227176798458842972936877928884881882549733868610936496479206895233395449023664595866120404132625071773217705497766205328886273424532479533923260710303754819181319680307550025565152689521263519411844455995137684157704970744752015582209502817261150380450771033394046586484512235667324412387651238842911344090375526360588704606411398946849499768964625618168212356848613076307915745133384714786731030697030816668315885653419866681649305504422218104874454909296515868564641810373358558210115075204872536291624340958011508045041679457608554035127036983116964083831448926937065268255927939099763832808483752671019457615741653560882273688050470579592446048731329771179226500463014058747229009407109056984282151863582702761835293753398571819558867061598831709499674486429251608295674053195077731768815061726496347877992514607892162087941456827634439960533380725218071578613393270785728109707171799665316280104531699102712127919256180780553217476438417310222082532301451302326087495125236699820190370522137681246548732459364916038573153537643678189103888979209080522017303464983549613508607891673731095363454258706650648995269818436569768150076827447718580153182867948102679637676731824582624576587795475456186197144223914216569815225703081581891108999831467223655894704123279338715555121135286711873910253072932821863720817696772365570767817269105620095675012546063836126786785834275722202431853464372114259799792561529736124221180657155566856239846676371181745511077012818802016360099833339411132732527779680820767156956952646337125825582741034438342068028094943149433082958910644070093978371185097478304920127277889359779320383125317210095574845371243313365846871653947082909584632458598493906278524485851017869999377126860926792285490496293042359183891442929688932776050156604685317813419543379069575825762514089463768620176926880137010684040642983206641184105456922289326653453787244865043800311641575013287726487385913114866932126732789476908660162027545526637202135486731421632526962116158411957090822258911749148761550377946381486591951285682864407234389081423523655008040782362921375691737931024958495922027758537985423766019832277586555110765876484702056803724821819503346002133004335553532645984267393535897639678102764656200462121104616096138804616768165499965355077351386079775218018990524176539425650750676651811041296950482797430897934951650054878567522298892530680888927065153118670294075625899147889513519143510274496896220588499774442699823145805912056694812129269608589342869527821388905117767045159921976456853832185822647288206184426920084831556528460792374110188873203528584672226971741405732719706830801855997828381926334141058749417372506776370599996360089705089069131524871861247762083468967219208876063799593445699048521297721518117959539908536943384153730080048845514728"
#chuỗi b có 4591 kí tự
print(sum(a,b))
#print(len(sum(a,b)))